package main

import (
	"os"

	"github.com/alecthomas/kingpin/v2"
	"github.com/app-sre/acs-cve-prom-exporter/cmd/exporter"
	"github.com/go-kit/log/level"
	"github.com/prometheus/common/promlog"
	"github.com/prometheus/common/promlog/flag"
	"github.com/prometheus/common/version"
)

const (
	AcsEndpoint = "ACS_ENDPOINT"
	AcsToken    = "ACS_TOKEN"
)

var (
	listenAddress = kingpin.Flag("web.listen-address", "The address to listen on for HTTP requests.").Default(":9090").String()
	metricsPath   = kingpin.Flag("web.telemetry-path", "Path under which to expose metrics.").Default("/metrics").String()
	namespace     = "acs_cve_prom_exporter"
	shortFlagName = 'h'
)

func main() {
	promLogConfig := &promlog.Config{}
	flag.AddFlags(kingpin.CommandLine, promLogConfig)
	kingpin.Version(version.Print(namespace))
	kingpin.HelpFlag.Short(shortFlagName)
	kingpin.Parse()
	logger := promlog.New(promLogConfig)
	endpoint := os.Getenv(AcsEndpoint)
	if endpoint == "" {
		level.Error(logger).Log("msg", "Required variable missing", AcsEndpoint)
		os.Exit(1)
	}
	token := os.Getenv(AcsToken)
	if token == "" {
		level.Error(logger).Log("msg", "Required variable missing", AcsEndpoint)
		os.Exit(1)
	}
	os.Exit(exporter.Run(exporter.RunParams{
		Endpoint:      endpoint,
		Token:         token,
		ListenAddress: listenAddress,
		MetricsPath:   metricsPath,
		Logger:        logger,
	}))
}
