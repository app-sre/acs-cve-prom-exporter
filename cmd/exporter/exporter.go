package exporter

import (
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/app-sre/acs-cve-prom-exporter/internal/acs"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

func Run(endpoint string, token string) int {
	reg := prometheus.NewRegistry()
	exit := make(chan struct{})
	term := make(chan os.Signal, 1)
	signal.Notify(term, os.Interrupt, syscall.SIGTERM)
	go acs.Run(reg, endpoint, token, exit)

	go func(exit chan struct{}) {
		http.Handle("/metrics", promhttp.HandlerFor(reg, promhttp.HandlerOpts{}))
		log.Println("Beginning to serve on port :9090")
		if err := http.ListenAndServe(":9090", nil); err != nil {
			log.Println("Error starting server ", err)
			exit <- struct{}{}
		}
	}(exit)
	for {
		select {
		case <-term:
			log.Println("shutting down gracefully")
			return 0
		case <-exit:
			return 1
		}
	}
}
