package exporter

import (
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/app-sre/acs-cve-prom-exporter/internal/acs"
	"github.com/go-kit/log"
	"github.com/go-kit/log/level"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

type RunParams struct {
	Endpoint      string
	Token         string
	ListenAddress *string
	MetricsPath   *string
	Logger        log.Logger
}

func Run(params RunParams) int {
	reg := prometheus.NewRegistry()
	exit := make(chan struct{})
	term := make(chan os.Signal, 1)
	signal.Notify(term, os.Interrupt, syscall.SIGTERM)
	credentials := acs.ACSCredentials{
		Endpoint: params.Endpoint,
		Token:    params.Token,
	}
	go acs.Run(reg, params.Logger, credentials, exit)
	http.Handle(*params.MetricsPath, promhttp.HandlerFor(reg, promhttp.HandlerOpts{}))
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte(`<html>
             <head><title>ACS CVE Exporter</title></head>
             <body>
             <h1>ACS CVE Exporter</h1>
             <p><a href='` + *params.MetricsPath + `'>Metrics</a></p>
             </body>
             </html>`))
	})
	srv := http.Server{Addr: *params.ListenAddress}
	go func(exit chan struct{}) {
		level.Info(params.Logger).Log("msg", "Beginning to serve on", "address", params.ListenAddress)
		if err := srv.ListenAndServe(); err != nil {
			level.Error(params.Logger).Log("msg", "Error starting server ", err)
			exit <- struct{}{}
		}
	}(exit)
	for {
		select {
		case <-term:
			level.Info(params.Logger).Log("msg", "Recieved SIGTERM shutting down gracefully")
			return 0
		case <-exit:
			return 1
		}
	}
}
